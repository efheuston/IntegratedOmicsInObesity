---
title: "ArchR-DataViz"
author: "Elisabeth F. Heuston"
html:
 embed-resources: true
 self-contained-math: true
execute:
 cache: false
editor: visual
---

# Background

Ran `ArchR.R` on lean, overweight, and obese HPAP scATAC data.\
lean (NW)\
overweight (OW)\
obese (OB)\
This document is primarily for data visualization. Additional analyses should be run in `ArchR.R`\
\# Setup

```{r, setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/Users/heustonef/Desktop/Obesity/snATAC/")
```

## Load libraries and local functions

```{r}
library(ArchR) 
addArchRGenome("hg38")
invisible(sapply(list.files(path = "/Users/heustonef/OneDrive-NIH/SingleCellMetaAnalysis/GitRepository/scMultiomics_MetaAnalysis/RFunctions", pattern = "*.R$", full.names = TRUE),
								 source))
atacProject <- "Obesity_snATAC-ArchR_NW-OB"
writeLines(capture.output(sessionInfo()), paste0(atacProject, "_sessionInfo.txt"))
```

## Load metadata

```{r}
metadata <- read.table(file = "/Users/heustonef/OneDrive-NIH/SingleCellMetaAnalysis/GitRepository/scMultiomics_MetaAnalysis/HPAPMetaData.txt", header = TRUE, sep = "\t")
rownames(metadata) <- metadata$DonorID
```

## Load data

```{r warning=FALSE}
arch.proj <- loadArchRProject(path = "~/Desktop/Obesity/snATAC/", showLogo = FALSE)
```

Subset archR to exclude clusters 1 and 21
```{r}
arch.cell.subset <- BiocGenerics::which(arch.proj$Harmony_res0.5 %ni% c("C1", "C21"))
cellsSample <- arch.proj$cellNames[arch.cell.subset]
arch.subset <- arch.proj[cellsSample, ]
```
```{r}
cellcoldata <- getCellColData(arch.proj, select = c("log10(nFrags)", "TSSEnrichment"))

# plot unique nuclear fragments vs TSS enrichment score
ggPoint(
	x = cellcoldata[,1],
	y = cellcoldata[,2],
	colorDensity = TRUE,
	continuousSet = "sambaNight", 
	xlabel = "Log10 Unique Fragments",
	ylabel = "TSS Enrichment",
	xlim = c(log10(500), quantile(cellcoldata[,1], probs = 0.99)),
	ylim = c(0, quantile(cellcoldata[,2], probs = 0.99))) +
	geom_hline(yintercept = 4, lty = "dashed") +
	geom_vline(xintercept = 3, lty = "dashed")


# plot TSSEnrichment ridge plot per sample
plotGroups(
	ArchRProj = arch.proj,
	groupBy = "Sample", 
	colorBy = "cellColData",
	name = "TSSEnrichment", 
	plotAs = "ridges"
) +
	geom_vline(xintercept = 8, lty = "dashed") 

# -- TSS plots show some samples have 2 TSS enrichment at 2 different scores. Will set cutoff @ 8 to maintain a single enriched peak.

# plot nFrags ridge plot per sample
plotGroups(
	ArchRProj = arch.proj,
	groupBy = "Sample", 
	colorBy = "cellColData",
	name = "log10(nFrags)", 
	plotAs = "ridges") +
	geom_vline(xintercept = log10(1000), lty = "dashed") +
	geom_vline(xintercept = log10(30000), lty = "dashed")

```

## Cluster info

```{r}
png(filename = paste0(atacProject, "-UMAPharmony-Obesity.png"), height = 1200, width = 1200)
plotEmbedding(ArchRProj = arch.proj, colorBy = "cellColData", name = "Obesity", embedding = "UMAP_harmony")
dev.off()
png(filename = paste0(atacProject, "-UMAPharmony-BMI.png"), height = 1200, width = 1200)
plotEmbedding(ArchRProj = arch.proj, colorBy = "cellColData", name = "BMI", embedding = "UMAP_harmony", plotAs = "points")
dev.off()
png(filename = paste0(atacProject, "-UMAPharmony-cluster.png"), height = 1200, width = 1200)
plotEmbedding(ArchRProj = arch.proj, colorBy = "cellColData", name = "Harmony_res0.5", embedding = "UMAP_harmony", plotAs = "points")
dev.off()
```
### cells per category
```{r}
table(arch.proj$Obesity)
```

### cells per harmony cluster
```{r}
table(arch.proj$Harmony_res0.5)
```
```{r}
table(arch.proj$Harmony_res0.5, arch.proj$Obesity)
```

Donor contribution per cluster
```{r}
table(arch.proj$DonorID, arch.proj$Harmony_res0.5)
```
```{r}
length(unique(arch.proj$DonorID))
```


```{r}
cM <- confusionMatrix(paste0(arch.proj$Harmony_res0.5), paste0(arch.proj$Obesity))
cM <- cM / Matrix::rowSums(cM)
pheatmap::pheatmap(
	mat = as.matrix(cM),
	color = paletteContinuous("whiteBlue"),
	border_color = "black", 
	display_numbers = TRUE, 
	number_color = "firebrick"
)
```

## Motif images
```{r}
markerPeaks <- readRDS("~/Desktop/Obesity/snATAC/Obesity_snATAC-MarkerPeaks.RDS")
```

```{r}
n.motifs <- 10
enrichEncode <- peakAnnoEnrichment(seMarker = markerPeaks, ArchRProj = arch.subset, peakAnnotation = "EncodeTFBS", cutOff = "FDR <= 0.1 & Log2FC >= 0.5")
heatmapEncode <- plotEnrichHeatmap(enrichEncode, n = n.motifs, transpose = FALSE)
ComplexHeatmap::draw(heatmapEncode, heatmap_legend_side = "bot", annotation_legend_side = "bot")

png(filename = paste0(atacProject, "-Top", as.character(n.motifs), "MotifsPerCluster.png"), height = 1200, width = 800)
ComplexHeatmap::draw(heatmapEncode, heatmap_legend_side = "bot", annotation_legend_side = "bot")
dev.off()
```

```{r}
plotVarDev <- getVarDeviations(arch.proj, name = "MotifMatrix", plot = FALSE, n = 15)
plotVarDev[1:15, "name"]

plotVarDev <- getVarDeviations(arch.proj, name = "MotifMatrix", plot = TRUE, n = 15)
ggplot(plotVarDev) + ggrepel::geom_label_repel(size = 5)

png(filename = paste0(atacProject, "-Top15Motifs.png"), height = 800, width = 1200)
plotVarDev
dev.off()

getVarDeviations(arch.proj, name = "MotifMatrix", plot = TRUE, n = 15)
plotVarDev <- getVarDeviations(arch.proj, name = "MotifMatrix", plot = TRUE, n = 15)
plotVarDev

png(filename = paste0(atacProject, "-Top15Motifs.png"), height = 800, width = 1200)
plotVarDev
dev.off()



```
```{r}
plotVarDev <- getVarDeviations(arch.proj, name = "MotifMatrix", plot = FALSE, n = 15)
rowV <- data.frame(plotVarDev)
rowV$name <- unlist(lapply(strsplit(as.character(rowV$name), "_"), '[[', 1))

head(rowV)	

ggplot(rowV, aes(x = rank, y = combinedVars, color = combinedVars)) +
	geom_point(size = 1) + 
	scale_color_gradientn(colors = paletteContinuous(set = "comet")) +
	ggrepel::geom_label_repel(
		data = rowV[rev(seq_len(15)), ], aes(x = rank, y = combinedVars, label = name), 
		size = 10,
		color = "black",
		nudge_x = 2
	) + theme_ArchR() + ylab("Variability") + xlab("Rank Sorted Annotations")

png(filename = "plotVarDev.png", height = 800, width = 1200)
ggplot(rowV, aes(x = rank, y = combinedVars, color = combinedVars)) +
	geom_point(size = 1) + 
	scale_color_gradientn(colors = paletteContinuous(set = "comet")) +
	ggrepel::geom_label_repel(
		data = rowV[rev(seq_len(15)), ], aes(x = rank, y = combinedVars, label = name), 
		size = 7,
		color = "black",
		nudge_x = 3) + 
	theme_ArchR() + ylab("Variability") + xlab("Rank Sorted Annotations")
dev.off()

```

```{r}
arch.markers <- readRDS("~/Desktop/Obesity/snATAC/Obesity_snATAC-markergenes.RDS")
heatmap.islets <- plotMarkerHeatmap(seMarker 
																		= arch.markers, 
																		cutOff = "FDR <= 0.01 & Log2FC >=1.25",
																		labelMarkers = unlist(panc.markers),
																		transpose = TRUE)
heatmap.plot <- ComplexHeatmap::draw(heatmap.islets, heatmap_legend_side = "bot", annotation_legend_side = "bot")
```

```{r}
# for(i in 1:length(panc.markers)){
# 	chart.name <- names(panc.markers[i])
# 	gene.set <- panc.markers[i]
# 	
# 	heatmap.islets <- plotMarkerHeatmap(seMarker = arch.markers, 
# 																			cutOff = "FDR <= 0.01 & Log2FC >=1.25",
# 																			labelMarkers = unlist(gene.set),
# 																			transpose = TRUE, )
# 	heatmap.plot <- ComplexHeatmap::draw(heatmap.islets, heatmap_legend_side = "bot", annotation_legend_side = "bot")
# }
```

```{r}
panc.tfs <- c("PDX1", "PTF1A", "SOX9", "NGN3", "HES1", "HNF6", "NEUROD1", "RFX3", "RFX6", "PAX4", "PAX6", "MAFB")
panc.motifs <- getFeatures(arch.proj, select = paste(panc.tfs, collapse="|"), useMatrix = "MotifMatrix")
panc.motifs
```

```{r }
setwd("~/Desktop/")
p <- plotGroups(ArchRProj = arch.proj, 
  groupBy = "Obesity", 
  colorBy = "MotifMatrix", 
  name = panc.motifs,
  imputeWeights = getImputeWeights(arch.proj)
)
p2 <- lapply(seq_along(p), function(x){
  if(x != 1){
    p[[x]] + guides(color = FALSE, fill = FALSE) + 
    theme_ArchR(baseSize = 6) +
    theme(plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm")) +
    theme(
        axis.text.y=element_blank(), 
        axis.ticks.y=element_blank(),
        axis.title.y=element_blank()
    ) + ylab("")
  }else{
    p[[x]] + guides(color = FALSE, fill = FALSE) + 
    theme_ArchR(baseSize = 6) +
    theme(plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm")) +
    theme(
        axis.ticks.y=element_blank(),
        axis.title.y=element_blank()
    ) + ylab("")
  }
})
do.call(cowplot::plot_grid, c(list(nrow = 1, rel_widths = c(2, rep(1, length(p2) - 1))),p2))
```

```{r}
# motifPositions <- getPositions(arch.proj)

```

## plotting gene score matrix 
Favourite genes

```{r}
panc.genes <- c("GCG", "IAPP", "INS", "TTR", "MAFB", "SST", "PPY", "CPA1", "PRSS1", "MALAT1", "NEAT1", "PTF1A", "PDX1", "SOX9", "APOE", "PECAM1")
```

```{r}

panc.genes <- c("GCG", "INS", "SST", "KRT19", "PRSS1", "PRSS2", "ETV1", "SERTM1", "XCR1")

p <- plotEmbedding(
    ArchRProj = arch.proj, 
    colorBy = "GeneScoreMatrix", 
    name = panc.genes, 
    plotAs = "points",
    embedding = "UMAP_harmony",
    quantCut = c(0.01, 0.95),
    imputeWeights = NULL
)
p2 <- lapply(p, function(x){
    x + guides(color = FALSE, fill = FALSE) + 
    theme_ArchR(baseSize = 6.5) +
    theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
    theme(
        axis.text.x=element_blank(), 
        axis.ticks.x=element_blank(), 
        axis.text.y=element_blank(), 
        axis.ticks.y=element_blank()
    )
})
do.call(cowplot::plot_grid, c(list(ncol = 3),p2))
```
```{r}
listed.features <- panc.markers
for(i in 1:length(listed.features)){
	listed.features[i][[1]] <- listed.features[i][[1]][listed.features[i][[1]] %in% getFeatures(arch.proj)]
}
listed.features$prog.beta <- c("MAFB", "INS")
```

```{r}
for(i in 13:13){
	chart.name <- names(listed.features[i])
	gene.set <- listed.features[i][[1]]
	if(length(gene.set >0)){
		
		
		p <- plotEmbedding(
			ArchRProj = arch.proj, 
			colorBy = "GeneScoreMatrix", 
			name = unlist(gene.set), 
			embedding = "UMAP_harmony",
			quantCut = c(0.01, 0.95),
			imputeWeights = NULL
		)
		p2 <- lapply(p, function(x){
			x + guides(color = FALSE, fill = FALSE) + 
				theme_ArchR(baseSize = 6.5) +
				theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
				theme(
					axis.text.x=element_blank(), 
					axis.ticks.x=element_blank(), 
					axis.text.y=element_blank(), 
					axis.ticks.y=element_blank()
				)
		}
		)
		png(filename = paste0(atacProject, "-GeneScoreMatrix-", chart.name, ".png"), height = 1600, width = 1600)
		do.call(cowplot::plot_grid, c(list(ncol = 3),p2))
		dev.off()
	} else{
		print("Gene set = 0")
	}
}
```

```{r}
plotEmbedding(arch.proj, embedding = "UMAP_harmony", colorBy = "cellColData", name = "CPA1")
```

```{r}

plotEmbedding(arch.proj, embedding = "UMAP_harmony", colorBy = "cellColData", name = "predictedGroup_Un") +
	theme_ArchR(legendTextSize = 10)
plotEmbedding(arch.proj, embedding = "UMAP_harmony", colorBy = "cellColData", name = "Harmony_res0.5",) +
	theme_ArchR(legendTextSize = 10)
plotEmbedding(arch.proj, embedding = "UMAP_harmony", colorBy = "cellColData", name = "Phase") +
	theme_ArchR(legendTextSize = 10)

```
```{r}

```

```{r}
p <- plotEmbedding(
    ArchRProj = arch.proj, 
    colorBy = "GeneScoreMatrix", 
    name = c("FOS", "STAT3", "IGFBP7", "FABP4"), 
    embedding = "UMAP_harmony",
    quantCut = c(0.01, 0.95),
    imputeWeights = NULL
)
		p2 <- lapply(p, function(x){
			x + guides(color = FALSE, fill = FALSE) + 
				theme_ArchR(baseSize = 6.5) +
				theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
				theme(
					axis.text.x=element_blank(), 
					axis.ticks.x=element_blank(), 
					axis.text.y=element_blank(), 
					axis.ticks.y=element_blank()
				)
		}
		)
do.call(cowplot::plot_grid, c(list(ncol = 3),p2))

```

trackplotting

```{r}
 p<- plotBrowserTrack(
    ArchRProj = arch.subset, 
    groupBy = "Harmony_res0.5", 
    geneSymbol = c("FOS", "STAT3"), 
    upstream = 100000,
    downstream = 20000
)
```
```{r}
grid::grid.newpage()
grid::grid.draw(p$FOS)
```


```{r}
arch.cell.subset <- BiocGenerics::which(arch.subset$Harmony_res0.5 %in% "C8")
cellsSample <- arch.subset$cellNames[arch.cell.subset]
new.subset <- arch.subset[cellsSample, ]

p<- plotBrowserTrack(
	ArchRProj = new.subset, 
	groupBy = "Obesity", 
	geneSymbol = c("MALAT1", "NEAT1"), 
	upstream = 2500,
	downstream = 2500
)


```


```{r}
grid::grid.newpage()
grid::grid.draw(p$MALAT1)
```
```{r}
arch.cell.subset <- BiocGenerics::which(arch.subset$Harmony_res0.5 %in% c("C5", "C6"))
cellsSample <- arch.subset$cellNames[arch.cell.subset]
new.subset <- arch.subset[cellsSample, ]

p<- plotBrowserTrack(
	ArchRProj = new.subset, 
	groupBy = "Obesity", 
	geneSymbol = c("IGFBP7"), 
	upstream = 25000,
	downstream = 25000
)
grid::grid.newpage()
grid::grid.draw(p$IGFBP7)


```
```{r}
p <- plotEmbedding(
    ArchRProj = arch.proj, 
    colorBy = "GeneScoreMatrix", 
    name = c("FOS", "STAT3", "IGFBP7", "FABP4"), 
    embedding = "UMAP_harmony",
    quantCut = c(0.01, 0.95),
    imputeWeights = NULL
)
		p2 <- lapply(p, function(x){
			x + guides(color = FALSE, fill = FALSE) + 
				theme_ArchR(baseSize = 6.5) +
				theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
				theme(
					axis.text.x=element_blank(), 
					axis.ticks.x=element_blank(), 
					axis.text.y=element_blank(), 
					axis.ticks.y=element_blank()
				)
		}
		)
do.call(cowplot::plot_grid, c(list(ncol = 3),p2))

```


```{r}
 p<- plotBrowserTrack(
    ArchRProj = arch.subset, 
    groupBy = "Harmony_res0.5", 
    geneSymbol = c("STAT3", "IGFBP7"),
    upstream = 90000,
    downstream = 20000, 
    verbose = FALSE
)
```
```{r}
grid::grid.newpage()
grid::grid.draw(p$STAT3)
```
```{r}
q<- plotBrowserTrack(
    ArchRProj = arch.subset, 
    groupBy = "Harmony_res0.5", 
    geneSymbol = c("FOS", "FABP4", "TIMP1", "MGP"),
    upstream = 20000,
    downstream = 20000
)

```
```{r}
grid::grid.draw(q$FOS)

```
```{r}
t<- plotBrowserTrack(
    ArchRProj = arch.subset, 
    groupBy = "Harmony_res0.5", 
    geneSymbol = c("FOS","FABP4", "TIMP1", "MGP", "INS"),
    upstream = 10000,
    downstream = 10000, 
    verbose = FALSE
)

```







```{r}

getVarDeviations(arch.proj, name = "MotifMatrix", plot = TRUE, n = 15) +       
	ggrepel::geom_label_repel(
        data = rowV[rev(seq_len(n)), ], aes(x = rank, y = combinedVars, label = name), 
        size = 5,
        color = "black",
        nudge_x = 2
      )

plotVarDev <- getVarDeviations(arch.proj, name = "MotifMatrix", plot = FALSE, n = 15)
plotVarDev[1:15, "name"]

plotVarDev <- getVarDeviations(arch.proj, name = "MotifMatrix", plot = TRUE, n = 15)
ggplot(plotVarDev) + ggrepel::geom_label_repel(size = 5)

png(filename = paste0(atacProject, "-Top15Motifs.png"), height = 800, width = 1200)
plotVarDev
dev.off()

getVarDeviations(arch.proj, name = "MotifMatrix", plot = TRUE, n = 15)
plotVarDev <- getVarDeviations(arch.proj, name = "MotifMatrix", plot = TRUE, n = 15)
plotVarDev

png(filename = paste0(atacProject, "-Top15Motifs.png"), height = 800, width = 1200)
plotVarDev
dev.off()



```

```{r}
markerPeaks <- getMarkerFeatures(arch.subset, groupBy = "Harmony_res0.5", useMatrix = "PeakMatrix", bias = c("TSSEnrichment", "log10(nFrags)"), testMethod = "wilcoxon")

```

```{r}
markerPeaks <- readRDS("~/Desktop/Obesity/snATAC/Obesity_snATAC-MarkerPeaks.RDS")
```

```{r}
markerList <-  getMarkers(markerPeaks, cutOff = "FDR <= 0.01 & Log2FC >= 1.25")
seGS <- getGroupSE(ArchRProj = arch.proj, useMatrix = "GeneScoreMatrix", groupBy = "Harmony_res0.5") 
```
```{r}
seGS

```

```{r}
n.motifs <- 3
enrichEncode <- peakAnnoEnrichment(seMarker = markerPeaks, ArchRProj = arch.subset, peakAnnotation = "EncodeTFBS", cutOff = "FDR <= 0.1 & Log2FC >= 0.5")
heatmapEncode <- plotEnrichHeatmap(enrichEncode, n = n.motifs, transpose = FALSE)
ComplexHeatmap::draw(heatmapEncode, heatmap_legend_side = "bot", annotation_legend_side = "bot")

png(filename = paste0(atacProject, "-Top", as.character(n.motifs), "MotifsPerCluster.png"), height = 1200, width = 800)
ComplexHeatmap::draw(heatmapEncode, heatmap_legend_side = "bot", annotation_legend_side = "bot")
dev.off()
```




